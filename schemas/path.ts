import * as nodePath from 'path';
import {Schema} from '@lpfreelance/electron-bridge-cli';

/**
 * A parsed path object generated by path.parse() or consumed by path.format().
 */
export interface ParsedPath {
    /**
     * The root of the path such as '/' or 'c:\'
     */
    root: string;
    /**
     * The full directory path such as '/home/user/dir' or 'c:\path\dir'
     */
    dir: string;
    /**
     * The file name including extension (if any) such as 'index.html'
     */
    base: string;
    /**
     * The file extension (if any) such as '.html'
     */
    ext: string;
    /**
     * The file name without extension (if any) such as 'index'
     */
    name: string;
}

export interface FormatInputPathObject {
    /**
     * The root of the path such as '/' or 'c:\'
     */
    root?: string | undefined;
    /**
     * The full directory path such as '/home/user/dir' or 'c:\path\dir'
     */
    dir?: string | undefined;
    /**
     * The file name including extension (if any) such as 'index.html'
     */
    base?: string | undefined;
    /**
     * The file extension (if any) such as '.html'
     */
    ext?: string | undefined;
    /**
     * The file name without extension (if any) such as 'index'
     */
    name?: string | undefined;
}

/**
 * Wrapper for Node.js path module, without posix & win32 interface.
 */
@Schema(true)
export class Path {

    public async basename(path: string, ext?: string): Promise<string> {
        return nodePath.basename(path, ext);
    }

    public async delimiter(): Promise<string> {
        return nodePath.delimiter;
    }

    public async dirname(path: string): Promise<string> {
        return nodePath.dirname(path);
    }

    public async extname(path: string): Promise<string> {
        return nodePath.extname(path);
    }

    public async format(obj: FormatInputPathObject): Promise<string> {
        return nodePath.format(obj);
    }

    public async isAbsolute(path: string): Promise<boolean> {
        return nodePath.isAbsolute(path);
    }

    public async join(...paths: string[]): Promise<string> {
        return nodePath.join(...paths);
    }

    public async normalize(path: string): Promise<string> {
        return nodePath.normalize(path);
    }

    public async parse(path: string): Promise<ParsedPath> {
        return nodePath.parse(path);
    }

    public async relative(from: string, to: string): Promise<string> {
        return nodePath.relative(from, to);
    }

    public async resolve(...pathSegments: string[]): Promise<string> {
        return nodePath.resolve(...pathSegments);
    }

    public async sep(): Promise<string> {
        return nodePath.sep;
    }

    public async toNamespacedPath(path: string): Promise<string> {
        return nodePath.toNamespacedPath(path);
    }

}
