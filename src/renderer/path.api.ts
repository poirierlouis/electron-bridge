
/**
 * A parsed path object generated by path.parse() or consumed by path.format().
 */
export interface ParsedPath {
    /**
     * The root of the path such as '/' or 'c:\'
     */
    root: string;
    /**
     * The full directory path such as '/home/user/dir' or 'c:\path\dir'
     */
    dir: string;
    /**
     * The file name including extension (if any) such as 'index.html'
     */
    base: string;
    /**
     * The file extension (if any) such as '.html'
     */
    ext: string;
    /**
     * The file name without extension (if any) such as 'index'
     */
    name: string;
}

export interface FormatInputPathObject {
    /**
     * The root of the path such as '/' or 'c:\'
     */
    root?: string | undefined;
    /**
     * The full directory path such as '/home/user/dir' or 'c:\path\dir'
     */
    dir?: string | undefined;
    /**
     * The file name including extension (if any) such as 'index.html'
     */
    base?: string | undefined;
    /**
     * The file extension (if any) such as '.html'
     */
    ext?: string | undefined;
    /**
     * The file name without extension (if any) such as 'index'
     */
    name?: string | undefined;
}

/**
 * Wrapper for Node.js path module, without posix & win32 interface.
 */
export interface PathApi {
    basename(path: string, ext?: string): Promise<string>;
    delimiter(): Promise<string>;
    dirname(path: string): Promise<string>;
    extname(path: string): Promise<string>;
    format(obj: FormatInputPathObject): Promise<string>;
    isAbsolute(path: string): Promise<boolean>;
    join(...paths: string[]): Promise<string>;
    normalize(path: string): Promise<string>;
    parse(path: string): Promise<ParsedPath>;
    relative(from: string, to: string): Promise<string>;
    resolve(...pathSegments: string[]): Promise<string>;
    sep(): Promise<string>;
    toNamespacedPath(path: string): Promise<string>;
}
